<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [stm32f407-ucosii\stm32f407-ucosii.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image stm32f407-ucosii\stm32f407-ucosii.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jun 15 14:21:26 2020
<BR><P>
<H3>Maximum Stack Usage =       1048 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
stm32f4xxEthEventHandler &rArr; stm32f4xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[fa]">OS_CPU_FP_Reg_Push</a>
 <LI><a href="#[fb]">OS_CPU_FP_Reg_Pop</a>
 <LI><a href="#[c0]">OS_CPU_SR_Save</a>
 <LI><a href="#[c1]">OS_CPU_SR_Restore</a>
 <LI><a href="#[e4]">OSStartHighRdy</a>
 <LI><a href="#[10a]">OSCtxSw</a>
 <LI><a href="#[d8]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1a4]">icmpv6SendErrorMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[199]">ipv6SendDatagram</a><BR>
 <LI><a href="#[221]">ndpSendNeighborSol</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[199]">ipv6SendDatagram</a><BR>
 <LI><a href="#[174]">dnsParseName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[174]">dnsParseName</a><BR>
 <LI><a href="#[16f]">dnsCompareName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16f]">dnsCompareName</a><BR>
 <LI><a href="#[1ea]">ipv6ParseFragmentHeader</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">ipv6ProcessPacket</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from stm32f4xx_eth_driver.o(i.ETH_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[63]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_Init)
 <LI><a href="#[60]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OSInit)
 <LI><a href="#[62]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[61]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OSInit)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[66]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[65]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6a]">dhcpClientProcessMessage</a> from dhcp_client.o(i.dhcpClientProcessMessage) referenced from dhcp_client.o(i.dhcpClientInit)
 <LI><a href="#[64]">fputc</a> from debug.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[7b]">lan8720DisableIrq</a> from lan8720_driver.o(i.lan8720DisableIrq) referenced from lan8720_driver.o(.constdata)
 <LI><a href="#[7a]">lan8720EnableIrq</a> from lan8720_driver.o(i.lan8720EnableIrq) referenced from lan8720_driver.o(.constdata)
 <LI><a href="#[7c]">lan8720EventHandler</a> from lan8720_driver.o(i.lan8720EventHandler) referenced from lan8720_driver.o(.constdata)
 <LI><a href="#[78]">lan8720Init</a> from lan8720_driver.o(i.lan8720Init) referenced from lan8720_driver.o(.constdata)
 <LI><a href="#[79]">lan8720Tick</a> from lan8720_driver.o(i.lan8720Tick) referenced from lan8720_driver.o(.constdata)
 <LI><a href="#[67]">led_blink_task</a> from app_main.o(i.led_blink_task) referenced from app_main.o(i.create_app_task)
 <LI><a href="#[6b]">llmnrProcessQuery</a> from llmnr_responder.o(i.llmnrProcessQuery) referenced from llmnr_responder.o(i.llmnrResponderInit)
 <LI><a href="#[5b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6c]">nbnsProcessMessage</a> from nbns_common.o(i.nbnsProcessMessage) referenced from nbns_common.o(i.nbnsInit)
 <LI><a href="#[6d]">netTask</a> from net.o(i.netTask) referenced from net.o(i.netInit)
 <LI><a href="#[71]">stm32f4xxEthDisableIrq</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthDisableIrq) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[70]">stm32f4xxEthEnableIrq</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthEnableIrq) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[72]">stm32f4xxEthEventHandler</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthEventHandler) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[6e]">stm32f4xxEthInit</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthInit) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[77]">stm32f4xxEthReadPhyReg</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthReadPhyReg) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[73]">stm32f4xxEthSendPacket</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthSendPacket) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[6f]">stm32f4xxEthTick</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthTick) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[74]">stm32f4xxEthUpdateMacAddrFilter</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacAddrFilter) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[75]">stm32f4xxEthUpdateMacConfig</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacConfig) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[76]">stm32f4xxEthWritePhyReg</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthWritePhyReg) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[69]">tcp_task</a> from app_main.o(i.tcp_task) referenced from app_main.o(i.create_app_task)
 <LI><a href="#[68]">uart_task</a> from app_main.o(i.uart_task) referenced from app_main.o(i.create_app_task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[28b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[28d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[28e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[28f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[290]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>OS_CPU_FP_Reg_Push</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[fb]"></a>OS_CPU_FP_Reg_Pop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[c0]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[c1]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[e4]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[10a]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d8]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[202]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
</UL>

<P><STRONG><a name="[20c]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>

<P><STRONG><a name="[86]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[291]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushPrefixList
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDefaultRouterList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[294]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[154]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
</UL>

<P><STRONG><a name="[113]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
</UL>

<P><STRONG><a name="[131]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsLocalHostAddr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckDestAddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
</UL>

<P><STRONG><a name="[119]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[85]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[298]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[299]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[29b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[29c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[89]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e6]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[ec]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[f1]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[f3]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[f5]"></a>App_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>

<P><STRONG><a name="[f7]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[fc]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[102]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ETH_IRQHandler &rArr; osSetEventFromIsr &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_ETH_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, eth.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>

<P><STRONG><a name="[96]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>

<P><STRONG><a name="[114]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[117]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[a7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 834 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[a9]"></a>HAL_RNG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rng.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[ad]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[b3]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>MX_ETH_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, eth.o(i.MX_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ETH_Init &rArr; HAL_ETH_Init &rArr; HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>MX_GPIO_Init</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>MX_RNG_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rng.o(i.MX_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>OSEventNameSet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[c2]"></a>OSFlagAccept</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSFlagAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>

<P><STRONG><a name="[c3]"></a>OSFlagCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(i.OSFlagCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSFlagCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[c4]"></a>OSFlagDel</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, os_flag.o(i.OSFlagDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSFlagDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
</UL>

<P><STRONG><a name="[c7]"></a>OSFlagPend</STRONG> (Thumb, 358 bytes, Stack size 80 bytes, os_flag.o(i.OSFlagPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>

<P><STRONG><a name="[ca]"></a>OSFlagPost</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>

<P><STRONG><a name="[cb]"></a>OSInit</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>OSInitHookBegin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d6]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[91]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>OSIntExit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>OSQCreate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(i.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
</UL>

<P><STRONG><a name="[db]"></a>OSSchedLock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
</UL>

<P><STRONG><a name="[dc]"></a>OSSchedUnlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
</UL>

<P><STRONG><a name="[dd]"></a>OSSemCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[de]"></a>OSSemPend</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[e1]"></a>OSSemPost</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[e3]"></a>OSStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>OSTCBInitHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[e7]"></a>OSTaskCreate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_task
</UL>

<P><STRONG><a name="[d3]"></a>OSTaskCreateExt</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateStaticTask
</UL>

<P><STRONG><a name="[eb]"></a>OSTaskCreateHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[ed]"></a>OSTaskDel</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[f0]"></a>OSTaskDelHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[f2]"></a>OSTaskIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[d4]"></a>OSTaskNameSet</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[f4]"></a>OSTaskReturnHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[f6]"></a>OSTaskStatHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[f8]"></a>OSTaskStkChk</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[e8]"></a>OSTaskStkInit</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[f9]"></a>OSTaskSuspend</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[5e]"></a>OSTaskSwHook</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_FP_Reg_Push
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_FP_Reg_Pop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>OSTimeDly</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
</UL>

<P><STRONG><a name="[fe]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[ff]"></a>OSTimeGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(i.OSTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[100]"></a>OSTimeTick</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[101]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[103]"></a>OSTmrSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[d5]"></a>OSTmr_Init</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[109]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInitFreq
</UL>

<P><STRONG><a name="[107]"></a>OS_CPU_SysTickInitFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickInitFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickInitFreq &rArr; ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[e2]"></a>OS_EventTaskRdy</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[e0]"></a>OS_EventTaskRemove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[ee]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[df]"></a>OS_EventTaskWait</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[da]"></a>OS_EventWaitListInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[d0]"></a>OS_FlagInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c9]"></a>OS_FlagUnlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[104]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[d1]"></a>OS_MemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d2]"></a>OS_QInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c6]"></a>OS_Sched</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[e9]"></a>OS_TCBInit</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[60]"></a>OS_TaskIdle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OSInit)
</UL>
<P><STRONG><a name="[62]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[61]"></a>OS_TaskStat</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OSInit)
</UL>
<P><STRONG><a name="[10b]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[ea]"></a>OS_TaskStkClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[10c]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[10e]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[112]"></a>SEGGER_RTT_WriteString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29d]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[148]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[29e]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[29f]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[11d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a0]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
</UL>

<P><STRONG><a name="[2a1]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2a2]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11e]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a3]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2a4]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2a5]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[285]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
</UL>

<P><STRONG><a name="[2a6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2a7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2a8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[289]"></a>aesEncryptBlock</STRONG> (Thumb, 516 bytes, Stack size 36 bytes, aes.o(i.aesEncryptBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[288]"></a>aesInit</STRONG> (Thumb, 380 bytes, Stack size 20 bytes, aes.o(i.aesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aesInit
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[124]"></a>arpCreateEntry</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, arp.o(i.arpCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = arpCreateEntry &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[127]"></a>arpEnqueuePacket</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, arp.o(i.arpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = arpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[129]"></a>arpFindEntry</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arp.o(i.arpFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arpFindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
</UL>

<P><STRONG><a name="[12d]"></a>arpFlushCache</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, arp.o(i.arpFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = arpFlushCache &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[126]"></a>arpFlushQueuedPackets</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arp.o(i.arpFlushQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>

<P><STRONG><a name="[12e]"></a>arpInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arp.o(i.arpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arpInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[12f]"></a>arpProcessPacket</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, arp.o(i.arpProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = arpProcessPacket &rArr; arpProcessRequest &rArr; arpSendReply &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[133]"></a>arpProcessReply</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, arp.o(i.arpProcessReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = arpProcessReply &rArr; arpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[134]"></a>arpProcessRequest</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, arp.o(i.arpProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = arpProcessRequest &rArr; arpSendReply &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[139]"></a>arpResolve</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, arp.o(i.arpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[13b]"></a>arpSendProbe</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, arp.o(i.arpSendProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = arpSendProbe &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[137]"></a>arpSendQueuedPackets</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, arp.o(i.arpSendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = arpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[138]"></a>arpSendReply</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, arp.o(i.arpSendReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = arpSendReply &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
</UL>

<P><STRONG><a name="[13a]"></a>arpSendRequest</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, arp.o(i.arpSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[141]"></a>arpTick</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, arp.o(i.arpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = arpTick &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[142]"></a>create_app_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_main.o(i.create_app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = create_app_task &rArr; ucos_show_version &rArr; ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_show_version
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>dhcpAddOption</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dhcp_common.o(i.dhcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcpAddOption &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[145]"></a>dhcpClientChangeState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[14c]"></a>dhcpClientCheckTimeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = dhcpClientCheckTimeout &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
</UL>

<P><STRONG><a name="[14d]"></a>dhcpClientComputeElapsedTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dhcp_client.o(i.dhcpClientComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = dhcpClientComputeElapsedTime &rArr; osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
</UL>

<P><STRONG><a name="[14e]"></a>dhcpClientDumpConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = dhcpClientDumpConfig &rArr; formatSystemTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[150]"></a>dhcpClientGetDefaultSettings</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dhcp_client.o(i.dhcpClientGetDefaultSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpClientGetDefaultSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[152]"></a>dhcpClientInit</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = dhcpClientInit &rArr; udpAttachRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[156]"></a>dhcpClientLinkChangeEvent</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = dhcpClientLinkChangeEvent &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[157]"></a>dhcpClientParseAck</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, dhcp_client.o(i.dhcpClientParseAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = dhcpClientParseAck &rArr; dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[15b]"></a>dhcpClientParseNak</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, dhcp_client.o(i.dhcpClientParseNak))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = dhcpClientParseNak &rArr; dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[15c]"></a>dhcpClientParseOffer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientParseOffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = dhcpClientParseOffer &rArr; dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[6a]"></a>dhcpClientProcessMessage</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = dhcpClientProcessMessage &rArr; dhcpClientParseAck &rArr; dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_client.o(i.dhcpClientInit)
</UL>
<P><STRONG><a name="[15d]"></a>dhcpClientSendDecline</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, dhcp_client.o(i.dhcpClientSendDecline))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDecline &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[160]"></a>dhcpClientSendDiscover</STRONG> (Thumb, 220 bytes, Stack size 104 bytes, dhcp_client.o(i.dhcpClientSendDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDiscover &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[161]"></a>dhcpClientSendRequest</STRONG> (Thumb, 340 bytes, Stack size 104 bytes, dhcp_client.o(i.dhcpClientSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[162]"></a>dhcpClientStart</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dhcp_client.o(i.dhcpClientStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = dhcpClientStart &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[163]"></a>dhcpClientStateBound</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp_client.o(i.dhcpClientStateBound))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateBound &rArr; dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[164]"></a>dhcpClientStateInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInit &rArr; dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[166]"></a>dhcpClientStateInitReboot</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientStateInitReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInitReboot &rArr; dhcpClientChangeState &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[167]"></a>dhcpClientStateProbing</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientStateProbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[168]"></a>dhcpClientStateRebinding</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientStateRebinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[16a]"></a>dhcpClientStateRebooting</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientStateRebooting))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebooting &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[16b]"></a>dhcpClientStateRenewing</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientStateRenewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRenewing &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[16c]"></a>dhcpClientStateRequesting</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp_client.o(i.dhcpClientStateRequesting))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[16d]"></a>dhcpClientStateSelecting</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientStateSelecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateSelecting &rArr; dhcpClientSendDiscover &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[16e]"></a>dhcpClientTick</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dhcp_client.o(i.dhcpClientTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[15a]"></a>dhcpGetOption</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dhcp_common.o(i.dhcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[16f]"></a>dnsCompareName</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dns_common.o(i.dnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[170]"></a>dnsDeleteEntry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dns_cache.o(i.dnsDeleteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = dnsDeleteEntry &rArr; udpDetachRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
</UL>

<P><STRONG><a name="[176]"></a>dnsEncodeName</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, dns_common.o(i.dnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[172]"></a>dnsFlushCache</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dns_cache.o(i.dnsFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = dnsFlushCache &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[173]"></a>dnsInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dns_cache.o(i.dnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dnsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[174]"></a>dnsParseName</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, dns_common.o(i.dnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = dnsParseName &rArr;  dnsParseName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[175]"></a>dnsSendQuery</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, dns_client.o(i.dnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[178]"></a>dnsTick</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dns_cache.o(i.dnsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = dnsTick &rArr; dnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[17a]"></a>ethAcceptMacAddr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ethernet.o(i.ethAcceptMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethAcceptMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
</UL>

<P><STRONG><a name="[13c]"></a>ethAllocBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernet.o(i.ethAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
</UL>

<P><STRONG><a name="[17d]"></a>ethCalcCrc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
</UL>

<P><STRONG><a name="[189]"></a>ethCalcCrcEx</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, ethernet_misc.o(i.ethCalcCrcEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[17c]"></a>ethCheckCrc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethCheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ethCheckCrc &rArr; ethCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[17f]"></a>ethCheckDestAddr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ethernet_misc.o(i.ethCheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ethCheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[180]"></a>ethDropMacAddr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ethernet.o(i.ethDropMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
</UL>

<P><STRONG><a name="[181]"></a>ethInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernet.o(i.ethInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[182]"></a>ethPadFrame</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethPadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ethPadFrame &rArr; netBufferAppend
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[184]"></a>ethProcessFrame</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, ethernet.o(i.ethProcessFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateErrorStats
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[13e]"></a>ethSendFrame</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ethernet.o(i.ethSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
</UL>

<P><STRONG><a name="[186]"></a>ethUpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[185]"></a>ethUpdateInStats</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateInStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ethUpdateInStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[18a]"></a>ethUpdateOutStats</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateOutStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ethUpdateOutStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[147]"></a>formatSystemTime</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, date_time.o(i.formatSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = formatSystemTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[64]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0fprintf)
</UL>
<P><STRONG><a name="[249]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>

<P><STRONG><a name="[18e]"></a>icmpProcessEchoRequest</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, icmp.o(i.icmpProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[193]"></a>icmpProcessMessage</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, icmp.o(i.icmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = icmpProcessMessage &rArr; icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[194]"></a>icmpSendErrorMessage</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, icmp.o(i.icmpSendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[195]"></a>icmpv6ProcessDestUnreachable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, icmpv6.o(i.icmpv6ProcessDestUnreachable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icmpv6ProcessDestUnreachable &rArr; netBufferGetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[196]"></a>icmpv6ProcessEchoRequest</STRONG> (Thumb, 234 bytes, Stack size 120 bytes, icmpv6.o(i.icmpv6ProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = icmpv6ProcessEchoRequest &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[19a]"></a>icmpv6ProcessMessage</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, icmpv6.o(i.icmpv6ProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[19e]"></a>icmpv6ProcessPacketTooBig</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, icmpv6.o(i.icmpv6ProcessPacketTooBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = icmpv6ProcessPacketTooBig &rArr; ipv6UpdatePathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdatePathMtu
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[1a4]"></a>icmpv6SendErrorMessage</STRONG> (Thumb, 320 bytes, Stack size 104 bytes, icmpv6.o(i.icmpv6SendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
</UL>

<P><STRONG><a name="[1a6]"></a>igmpInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, igmp.o(i.igmpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = igmpInit &rArr; osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1a7]"></a>igmpJoinGroup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, igmp.o(i.igmpJoinGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = igmpJoinGroup &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[1a9]"></a>igmpLinkChangeEvent</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, igmp.o(i.igmpLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = igmpLinkChangeEvent &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[1aa]"></a>igmpProcessMessage</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, igmp.o(i.igmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = igmpProcessMessage &rArr; igmpProcessQueryMessage &rArr; igmpRand &rArr; netGetRand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessReportMessage
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessQueryMessage
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[1ac]"></a>igmpProcessQueryMessage</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, igmp.o(i.igmpProcessQueryMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = igmpProcessQueryMessage &rArr; igmpRand &rArr; netGetRand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[1ab]"></a>igmpProcessReportMessage</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, igmp.o(i.igmpProcessReportMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = igmpProcessReportMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[1ad]"></a>igmpRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, igmp.o(i.igmpRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmpRand &rArr; netGetRand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessQueryMessage
</UL>

<P><STRONG><a name="[1a8]"></a>igmpSendReportMessage</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, igmp.o(i.igmpSendReportMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpJoinGroup
</UL>

<P><STRONG><a name="[1ae]"></a>igmpTick</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, igmp.o(i.igmpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = igmpTick &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[18f]"></a>ipAllocBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ip.o(i.ipAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[1af]"></a>ipCalcChecksum</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ip.o(i.ipCalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
</UL>

<P><STRONG><a name="[191]"></a>ipCalcChecksumEx</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, ip.o(i.ipCalcChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
</UL>

<P><STRONG><a name="[198]"></a>ipCalcUpperLayerChecksumEx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ip.o(i.ipCalcUpperLayerChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ipCalcUpperLayerChecksumEx &rArr; ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[1b0]"></a>ipSendDatagram</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ip.o(i.ipSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[14f]"></a>ipv4AddrToString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ipv4.o(i.ipv4AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipv4AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
</UL>

<P><STRONG><a name="[1b1]"></a>ipv4CheckDestAddr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4CheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4CheckDestAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[1b2]"></a>ipv4CheckSourceAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ipv4_misc.o(i.ipv4CheckSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4CheckSourceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[1b6]"></a>ipv4DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4.o(i.ipv4DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[1b3]"></a>ipv4FindHole</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipv4_frag.o(i.ipv4FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4FindHole &rArr; netBufferAt
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[1b4]"></a>ipv4FlushFragQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ipv4_frag.o(i.ipv4FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ipv4FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[1b5]"></a>ipv4FragTick</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ipv4_frag.o(i.ipv4FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ipv4FragTick &rArr; icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1b7]"></a>ipv4FragmentDatagram</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, ipv4_frag.o(i.ipv4FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[213]"></a>ipv4GetBroadcastAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4GetBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[1b9]"></a>ipv4Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipv4.o(i.ipv4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[135]"></a>ipv4IsBroadcastAddr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[1c5]"></a>ipv4IsLocalHostAddr</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ipv4_misc.o(i.ipv4IsLocalHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4IsLocalHostAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1c6]"></a>ipv4IsOnLink</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsOnLink))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[136]"></a>ipv4IsTentativeAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsTentativeAddr))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[1ba]"></a>ipv4JoinMulticastGroup</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ipv4.o(i.ipv4JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = ipv4JoinMulticastGroup &rArr; igmpJoinGroup &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpJoinGroup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
</UL>

<P><STRONG><a name="[1bc]"></a>ipv4LinkChangeEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ipv4.o(i.ipv4LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[1bb]"></a>ipv4MapMulticastAddrToMac</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4MapMulticastAddrToMac))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[1bd]"></a>ipv4ProcessDatagram</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, ipv4.o(i.ipv4ProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[187]"></a>ipv4ProcessPacket</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ipv4.o(i.ipv4ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1c2]"></a>ipv4ReassembleDatagram</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, ipv4_frag.o(i.ipv4ReassembleDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[1c3]"></a>ipv4SearchFragQueue</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ipv4_frag.o(i.ipv4SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ipv4SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[140]"></a>ipv4SelectSourceAddr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
</UL>

<P><STRONG><a name="[192]"></a>ipv4SendDatagram</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ipv4.o(i.ipv4SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
</UL>

<P><STRONG><a name="[1b8]"></a>ipv4SendPacket</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, ipv4.o(i.ipv4SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsOnLink
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsLocalHostAddr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[1be]"></a>ipv4UpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[1c1]"></a>ipv4UpdateInStats</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateInStats))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[13f]"></a>ipv4UpdateOutStats</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateOutStats))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
</UL>

<P><STRONG><a name="[1c7]"></a>ipv6AddDefaultRouter</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6AddDefaultRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = ipv6AddDefaultRouter &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[1c8]"></a>ipv6AddPrefix</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, ipv6_misc.o(i.ipv6AddPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = ipv6AddPrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
</UL>

<P><STRONG><a name="[1ca]"></a>ipv6AddrToString</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ipv6.o(i.ipv6AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv6AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
</UL>

<P><STRONG><a name="[1cb]"></a>ipv6CheckDestAddr</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6CheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6CheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[1ee]"></a>ipv6CheckSourceAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6CheckSourceAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[1c9]"></a>ipv6CompPrefix</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6CompPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsOnLink
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
</UL>

<P><STRONG><a name="[1cc]"></a>ipv6ComputeSolicitedNodeAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6ComputeSolicitedNodeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv6ComputeSolicitedNodeAddr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
</UL>

<P><STRONG><a name="[1d5]"></a>ipv6DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6.o(i.ipv6DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
</UL>

<P><STRONG><a name="[1cd]"></a>ipv6FindHole</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipv6_frag.o(i.ipv6FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv6FindHole &rArr; netBufferAt
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[1ce]"></a>ipv6FlushAddrList</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6FlushAddrList))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ipv6FlushAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[1d0]"></a>ipv6FlushDefaultRouterList</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6FlushDefaultRouterList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv6FlushDefaultRouterList &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[1d1]"></a>ipv6FlushDnsServerList</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6FlushDnsServerList))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
</UL>

<P><STRONG><a name="[1d2]"></a>ipv6FlushFragQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipv6_frag.o(i.ipv6FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ipv6FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[1d3]"></a>ipv6FlushPrefixList</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6FlushPrefixList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv6FlushPrefixList &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[1d4]"></a>ipv6FragTick</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ipv6_frag.o(i.ipv6FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ipv6FragTick &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1d6]"></a>ipv6FragmentDatagram</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, ipv6_frag.o(i.ipv6FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[250]"></a>ipv6GenerateLinkLocalAddr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6GenerateLinkLocalAddr))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
</UL>

<P><STRONG><a name="[1d8]"></a>ipv6GetAddrScope</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ipv6_misc.o(i.ipv6GetAddrScope))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetMulticastAddrScope
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>

<P><STRONG><a name="[1f3]"></a>ipv6GetCommonPrefixLength</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6GetCommonPrefixLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6GetCommonPrefixLength
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>

<P><STRONG><a name="[1d9]"></a>ipv6GetMulticastAddrScope</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6GetMulticastAddrScope))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
</UL>

<P><STRONG><a name="[1da]"></a>ipv6GetPathMtu</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipv6_pmtu.o(i.ipv6GetPathMtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipv6GetPathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[1dc]"></a>ipv6Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ipv6.o(i.ipv6Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1a5]"></a>ipv6IsAnycastAddr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6IsAnycastAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipv6IsAnycastAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[1dd]"></a>ipv6IsLocalHostAddr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6IsLocalHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipv6IsLocalHostAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[1de]"></a>ipv6IsOnLink</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6IsOnLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ipv6IsOnLink &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
</UL>

<P><STRONG><a name="[19b]"></a>ipv6IsTentativeAddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6IsTentativeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipv6IsTentativeAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
</UL>

<P><STRONG><a name="[1df]"></a>ipv6JoinMulticastGroup</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ipv6.o(i.ipv6JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
</UL>

<P><STRONG><a name="[1e2]"></a>ipv6LeaveMulticastGroup</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ipv6.o(i.ipv6LeaveMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ipv6LeaveMulticastGroup &rArr; mldStopListening &rArr; mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStopListening
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>

<P><STRONG><a name="[1e4]"></a>ipv6LinkChangeEvent</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ipv6.o(i.ipv6LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushPrefixList
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushFragQueue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDefaultRouterList
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[1e0]"></a>ipv6MapMulticastAddrToMac</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6MapMulticastAddrToMac))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
</UL>

<P><STRONG><a name="[1e8]"></a>ipv6ParseDestOptHeader</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ipv6.o(i.ipv6ParseDestOptHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ipv6ParseDestOptHeader &rArr; ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[1ea]"></a>ipv6ParseFragmentHeader</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, ipv6_frag.o(i.ipv6ParseFragmentHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ipv6ParseFragmentHeader &rArr;  ipv6ProcessPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[1ec]"></a>ipv6ParseHopByHopOptHeader</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, ipv6.o(i.ipv6ParseHopByHopOptHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ipv6ParseHopByHopOptHeader &rArr; ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[1e9]"></a>ipv6ParseOptions</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ipv6.o(i.ipv6ParseOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
</UL>

<P><STRONG><a name="[1ed]"></a>ipv6ParseRoutingHeader</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ipv6.o(i.ipv6ParseRoutingHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ipv6ParseRoutingHeader &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[188]"></a>ipv6ProcessPacket</STRONG> (Thumb, 456 bytes, Stack size 104 bytes, ipv6.o(i.ipv6ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdateInStats
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckSourceAddr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckDestAddr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[1f0]"></a>ipv6RemoveDefaultRouter</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6RemoveDefaultRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipv6RemoveDefaultRouter &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[1f2]"></a>ipv6RemovePrefix</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6RemovePrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ipv6RemovePrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
</UL>

<P><STRONG><a name="[1eb]"></a>ipv6SearchFragQueue</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ipv6_frag.o(i.ipv6SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ipv6SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[197]"></a>ipv6SelectSourceAddr</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, ipv6_misc.o(i.ipv6SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ipv6SelectSourceAddr &rArr; ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetCommonPrefixLength
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[199]"></a>ipv6SendDatagram</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ipv6.o(i.ipv6SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPathMtu
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
</UL>

<P><STRONG><a name="[1d7]"></a>ipv6SendPacket</STRONG> (Thumb, 468 bytes, Stack size 80 bytes, ipv6.o(i.ipv6SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdateOutStats
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsLocalHostAddr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckSourceAddr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[1cf]"></a>ipv6SetAddr</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, ipv6_misc.o(i.ipv6SetAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
</UL>

<P><STRONG><a name="[1ef]"></a>ipv6UpdateInStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6UpdateInStats))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[1f8]"></a>ipv6UpdateOutStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6UpdateOutStats))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
</UL>

<P><STRONG><a name="[1a3]"></a>ipv6UpdatePathMtu</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipv6_pmtu.o(i.ipv6UpdatePathMtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipv6UpdatePathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
</UL>

<P><STRONG><a name="[7b]"></a>lan8720DisableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720_driver.o(i.lan8720DisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>lan8720DumpPhyReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720_driver.o(i.lan8720DumpPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[7a]"></a>lan8720EnableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8720_driver.o(i.lan8720EnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>lan8720EventHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lan8720_driver.o(i.lan8720EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = lan8720EventHandler &rArr; nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>lan8720Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lan8720_driver.o(i.lan8720Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lan8720Init &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720WritePhyReg
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720ReadPhyReg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720DumpPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>lan8720ReadPhyReg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lan8720_driver.o(i.lan8720ReadPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Tick
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
</UL>

<P><STRONG><a name="[79]"></a>lan8720Tick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lan8720_driver.o(i.lan8720Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lan8720Tick &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>lan8720WritePhyReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lan8720_driver.o(i.lan8720WritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lan8720WritePhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[67]"></a>led_blink_task</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_main.o(i.led_blink_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = led_blink_task &rArr; ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.create_app_task)
</UL>
<P><STRONG><a name="[6b]"></a>llmnrProcessQuery</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, llmnr_responder.o(i.llmnrProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = llmnrProcessQuery &rArr; llmnrSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llmnr_responder.o(i.llmnrResponderInit)
</UL>
<P><STRONG><a name="[200]"></a>llmnrResponderInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, llmnr_responder.o(i.llmnrResponderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = llmnrResponderInit &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1ff]"></a>llmnrSendResponse</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, llmnr_responder.o(i.llmnrSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = llmnrSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[240]"></a>macAddrToEui64</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ethernet.o(i.macAddrToEui64))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
</UL>

<P><STRONG><a name="[201]"></a>macStringToAddr</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ethernet.o(i.macStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = macStringToAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_task
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInitFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[248]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
</UL>

<P><STRONG><a name="[203]"></a>memPoolAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_mem.o(i.memPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[205]"></a>memPoolFree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(i.memPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = memPoolFree &rArr; osFreeMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[231]"></a>memPoolInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(i.memPoolInit))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[22d]"></a>mldInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mld.o(i.mldInit))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1e5]"></a>mldLinkChangeEvent</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mld.o(i.mldLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mldLinkChangeEvent &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[19c]"></a>mldProcessListenerQuery</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mld.o(i.mldProcessListenerQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mldProcessListenerQuery &rArr; mldRand &rArr; netGetRand
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldRand
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[19f]"></a>mldProcessListenerReport</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mld.o(i.mldProcessListenerReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mldProcessListenerReport &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[208]"></a>mldRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mld.o(i.mldRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mldRand &rArr; netGetRand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
</UL>

<P><STRONG><a name="[209]"></a>mldSendListenerDone</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, mld.o(i.mldSendListenerDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStopListening
</UL>

<P><STRONG><a name="[207]"></a>mldSendListenerReport</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, mld.o(i.mldSendListenerReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
</UL>

<P><STRONG><a name="[1e1]"></a>mldStartListening</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mld.o(i.mldStartListening))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
</UL>

<P><STRONG><a name="[1e3]"></a>mldStopListening</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mld.o(i.mldStopListening))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mldStopListening &rArr; mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[20a]"></a>mldTick</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mld.o(i.mldTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mldTick &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[20b]"></a>nbnsCompareName</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbnsCompareName
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[20d]"></a>nbnsEncodeName</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbnsEncodeName
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[20e]"></a>nbnsInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nbns_common.o(i.nbnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = nbnsInit &rArr; udpAttachRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[211]"></a>nbnsParseName</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, nbns_common.o(i.nbnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[6c]"></a>nbnsProcessMessage</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nbns_common.o(i.nbnsProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = nbnsProcessMessage &rArr; nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbns_common.o(i.nbnsInit)
</UL>
<P><STRONG><a name="[20f]"></a>nbnsProcessQuery</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, nbns_responder.o(i.nbnsProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[210]"></a>nbnsProcessResponse</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nbns_client.o(i.nbnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = nbnsProcessResponse &rArr; nbnsCompareName
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[179]"></a>nbnsSendQuery</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, nbns_client.o(i.nbnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = nbnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetBroadcastAddr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[212]"></a>nbnsSendResponse</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, nbns_responder.o(i.nbnsSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = nbnsSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
</UL>

<P><STRONG><a name="[214]"></a>ndpAddOption</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ndp_misc.o(i.ndpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndpAddOption &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[21c]"></a>ndpCheckOptions</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ndp_misc.o(i.ndpCheckOptions))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[1f5]"></a>ndpCreateDestCacheEntry</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpCreateDestCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = ndpCreateDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
</UL>

<P><STRONG><a name="[215]"></a>ndpCreateNeighborCacheEntry</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ndp_cache.o(i.ndpCreateNeighborCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
</UL>

<P><STRONG><a name="[1f7]"></a>ndpEnqueuePacket</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ndp.o(i.ndpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ndpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[1db]"></a>ndpFindDestCacheEntry</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpFindDestCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPathMtu
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdatePathMtu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
</UL>

<P><STRONG><a name="[217]"></a>ndpFindNeighborCacheEntry</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpFindNeighborCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
</UL>

<P><STRONG><a name="[1f1]"></a>ndpFlushDestCache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ndp_cache.o(i.ndpFlushDestCache))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
</UL>

<P><STRONG><a name="[218]"></a>ndpFlushNeighborCache</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpFlushNeighborCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ndpFlushNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
</UL>

<P><STRONG><a name="[216]"></a>ndpFlushQueuedPackets</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpFlushQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushNeighborCache
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
</UL>

<P><STRONG><a name="[21d]"></a>ndpGetOption</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ndp_misc.o(i.ndpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[219]"></a>ndpInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ndp.o(i.ndpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndpInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[21a]"></a>ndpIsFirstHopRouter</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ndp_misc.o(i.ndpIsFirstHopRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ndpIsFirstHopRouter &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
</UL>

<P><STRONG><a name="[1e6]"></a>ndpLinkChangeEvent</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ndp.o(i.ndpLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ndpLinkChangeEvent &rArr; ndpFlushNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushNeighborCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[21b]"></a>ndpParsePrefixInfoOption</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ndp_misc.o(i.ndpParsePrefixInfoOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = ndpParsePrefixInfoOption &rArr; ipv6AddPrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[1a2]"></a>ndpProcessNeighborAdv</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, ndp.o(i.ndpProcessNeighborAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = ndpProcessNeighborAdv &rArr; ndpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[1a1]"></a>ndpProcessNeighborSol</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, ndp.o(i.ndpProcessNeighborSol))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ndpProcessNeighborSol &rArr; ndpSendNeighborAdv &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[19d]"></a>ndpProcessRedirect</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, ndp.o(i.ndpProcessRedirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ndpProcessRedirect &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[1a0]"></a>ndpProcessRouterAdv</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, ndp.o(i.ndpProcessRouterAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[1f6]"></a>ndpResolve</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ndp.o(i.ndpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[222]"></a>ndpSelectDefaultRouter</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ndp_misc.o(i.ndpSelectDefaultRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
</UL>

<P><STRONG><a name="[1f4]"></a>ndpSelectNextHop</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ndp_misc.o(i.ndpSelectNextHop))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ndpSelectNextHop &rArr; ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsOnLink
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
</UL>

<P><STRONG><a name="[21f]"></a>ndpSendNeighborAdv</STRONG> (Thumb, 324 bytes, Stack size 88 bytes, ndp.o(i.ndpSendNeighborAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ndpSendNeighborAdv &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
</UL>

<P><STRONG><a name="[221]"></a>ndpSendNeighborSol</STRONG> (Thumb, 234 bytes, Stack size 88 bytes, ndp.o(i.ndpSendNeighborSol))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ndpSendNeighborSol &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
</UL>

<P><STRONG><a name="[21e]"></a>ndpSendQueuedPackets</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ndp_cache.o(i.ndpSendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = ndpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdateOutStats
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[223]"></a>ndpSendRouterSol</STRONG> (Thumb, 210 bytes, Stack size 88 bytes, ndp.o(i.ndpSendRouterSol))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ndpSendRouterSol &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[224]"></a>ndpTick</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ndp.o(i.ndpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ndpTick &rArr; ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[226]"></a>ndpUpdateAddrList</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, ndp_misc.o(i.ndpUpdateAddrList))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[228]"></a>ndpUpdateDefaultRouterList</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ndp_misc.o(i.ndpUpdateDefaultRouterList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ndpUpdateDefaultRouterList &rArr; osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[225]"></a>ndpUpdateNeighborCache</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, ndp_cache.o(i.ndpUpdateNeighborCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ndpUpdateNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[229]"></a>ndpUpdateNextHop</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ndp_misc.o(i.ndpUpdateNextHop))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ndpUpdateNextHop &rArr; ndpSelectNextHop &rArr; ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
</UL>

<P><STRONG><a name="[227]"></a>ndpUpdatePrefixList</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ndp_misc.o(i.ndpUpdatePrefixList))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = ndpUpdatePrefixList &rArr; ipv6RemovePrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[12b]"></a>netBufferAlloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, net_mem.o(i.netBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
</UL>

<P><STRONG><a name="[183]"></a>netBufferAppend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_mem.o(i.netBufferAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>

<P><STRONG><a name="[13d]"></a>netBufferAt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_mem.o(i.netBufferAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[190]"></a>netBufferConcat</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, net_mem.o(i.netBufferConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
</UL>

<P><STRONG><a name="[12c]"></a>netBufferCopy</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, net_mem.o(i.netBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netBufferCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
</UL>

<P><STRONG><a name="[12a]"></a>netBufferFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_mem.o(i.netBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[128]"></a>netBufferGetLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_mem.o(i.netBufferGetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
</UL>

<P><STRONG><a name="[22a]"></a>netBufferRead</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, net_mem.o(i.netBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
</UL>

<P><STRONG><a name="[177]"></a>netBufferSetLength</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, net_mem.o(i.netBufferSetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushFragQueue
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[1c4]"></a>netBufferWrite</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, net_mem.o(i.netBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferWrite &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
</UL>

<P><STRONG><a name="[22b]"></a>netConfigInterface</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, net.o(i.netConfigInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = netConfigInterface &rArr; llmnrResponderInit &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[151]"></a>netGetDefaultInterface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(i.netGetDefaultInterface))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGetDefaultSettings
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
</UL>

<P><STRONG><a name="[169]"></a>netGetRand</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net.o(i.netGetRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldRand
</UL>

<P><STRONG><a name="[165]"></a>netGetRandRange</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, net.o(i.netGetRandRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netGetRandRange &rArr; netGetRand
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[22f]"></a>netInit</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, net.o(i.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netInit &rArr; socketInit &rArr; ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateStaticTask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[17e]"></a>netInitRand</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net.o(i.netInitRand))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
</UL>

<P><STRONG><a name="[237]"></a>netInvokeLinkChangeCallback</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, net.o(i.netInvokeLinkChangeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = netInvokeLinkChangeCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[238]"></a>netProcessLinkChange</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, net.o(i.netProcessLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = netProcessLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInvokeLinkChangeCallback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[23b]"></a>netSetDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(i.netSetDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = netSetDriver &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[23c]"></a>netSetHostname</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net.o(i.netSetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = netSetHostname &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[23e]"></a>netSetInterfaceName</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net.o(i.netSetInterfaceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = netSetInterfaceName &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[23f]"></a>netSetMacAddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net.o(i.netSetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = netSetMacAddr &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToEui64
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[241]"></a>netSetPhyDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(i.netSetPhyDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = netSetPhyDriver &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[6d]"></a>netTask</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, net.o(i.netTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = netTask &rArr; netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.netInit)
</UL>
<P><STRONG><a name="[243]"></a>netTick</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, net.o(i.netTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[130]"></a>nicGetLogicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetLogicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
</UL>

<P><STRONG><a name="[158]"></a>nicGetPhysicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetPhysicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[246]"></a>nicIsParentInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nic.o(i.nicIsParentInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[1fa]"></a>nicNotifyLinkChange</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nic.o(i.nicNotifyLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIsParentInterface
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
</UL>

<P><STRONG><a name="[247]"></a>nicProcessPacket</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nic.o(i.nicProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
</UL>

<P><STRONG><a name="[18b]"></a>nicSendPacket</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nic.o(i.nicSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = nicSendPacket &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[244]"></a>nicTick</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nic.o(i.nicTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[17b]"></a>nicUpdateMacAddrFilter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nic.o(i.nicUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicUpdateMacAddrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
</UL>

<P><STRONG><a name="[14b]"></a>osAcquireMutex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_port_ucos2.o(i.osAcquireMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInvokeLinkChangeCallback
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
</UL>

<P><STRONG><a name="[204]"></a>osAllocMem</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_port_ucos2.o(i.osAllocMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>

<P><STRONG><a name="[22c]"></a>osCreateEvent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, os_port_ucos2.o(i.osCreateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osCreateEvent &rArr; OSFlagCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
</UL>

<P><STRONG><a name="[230]"></a>osCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_port_ucos2.o(i.osCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osCreateMutex &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
</UL>

<P><STRONG><a name="[236]"></a>osCreateStaticTask</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, os_port_ucos2.o(i.osCreateStaticTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osCreateStaticTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[22e]"></a>osDeleteEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_ucos2.o(i.osDeleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osDeleteEvent &rArr; OSFlagDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[206]"></a>osFreeMem</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_port_ucos2.o(i.osFreeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osFreeMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>

<P><STRONG><a name="[125]"></a>osGetSystemTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_ucos2.o(i.osGetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessQueryMessage
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpJoinGroup
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerElapsed
</UL>

<P><STRONG><a name="[14a]"></a>osReleaseMutex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_ucos2.o(i.osReleaseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = osReleaseMutex &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInvokeLinkChangeCallback
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
</UL>

<P><STRONG><a name="[149]"></a>osResumeAllTasks</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_port_ucos2.o(i.osResumeAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[1fd]"></a>osSetEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_ucos2.o(i.osSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Tick
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[92]"></a>osSetEventFromIsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_ucos2.o(i.osSetEventFromIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = osSetEventFromIsr &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>osSuspendAllTasks</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_port_ucos2.o(i.osSuspendAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSuspendAllTasks &rArr; OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[242]"></a>osWaitForEvent</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, os_port_ucos2.o(i.osWaitForEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[24a]"></a>remove_none_printable_char</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_debug.o(i.remove_none_printable_char))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[18d]"></a>rt_hw_console_output</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_debug.o(i.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_none_printable_char
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[24b]"></a>sha256Final</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sha256.o(i.sha256Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[28a]"></a>sha256Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sha256.o(i.sha256Init))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[24d]"></a>sha256ProcessBlock</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, sha256.o(i.sha256ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>

<P><STRONG><a name="[24c]"></a>sha256Update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sha256.o(i.sha256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[24e]"></a>slaacDumpConfig</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, slaac.o(i.slaacDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = slaacDumpConfig &rArr; ipv6AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[24f]"></a>slaacGenerateLinkLocalAddr</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, slaac.o(i.slaacGenerateLinkLocalAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GenerateLinkLocalAddr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
</UL>

<P><STRONG><a name="[251]"></a>slaacGetDefaultSettings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, slaac.o(i.slaacGetDefaultSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slaacGetDefaultSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[252]"></a>slaacInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, slaac.o(i.slaacInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = slaacInit &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[1e7]"></a>slaacLinkChangeEvent</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, slaac.o(i.slaacLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[253]"></a>slaacParsePrefixInfoOption</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, slaac.o(i.slaacParsePrefixInfoOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[220]"></a>slaacParseRouterAdv</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, slaac.o(i.slaacParseRouterAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[254]"></a>slaacStart</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, slaac.o(i.slaacStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = slaacStart &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[232]"></a>socketInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, socket.o(i.socketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = socketInit &rArr; ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[258]"></a>stm32f4xxEthCalcCrc</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f4xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthUpdateMacAddrFilter
</UL>

<P><STRONG><a name="[71]"></a>stm32f4xxEthDisableIrq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthDisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>stm32f4xxEthEnableIrq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthEnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>stm32f4xxEthEventHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthEventHandler &rArr; stm32f4xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>stm32f4xxEthInit</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthInit &rArr; stm32f4xxEthInitGpio &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitDmaDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>stm32f4xxEthInitDmaDesc</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInitDmaDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f4xxEthInitDmaDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[256]"></a>stm32f4xxEthInitGpio</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stm32f4xxEthInitGpio &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[77]"></a>stm32f4xxEthReadPhyReg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthReadPhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4xxEthReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>stm32f4xxEthReceivePacket</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthEventHandler
</UL>

<P><STRONG><a name="[73]"></a>stm32f4xxEthSendPacket</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthSendPacket &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>stm32f4xxEthTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthTick))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>stm32f4xxEthUpdateMacAddrFilter</STRONG> (Thumb, 250 bytes, Stack size 52 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stm32f4xxEthUpdateMacAddrFilter &rArr; stm32f4xxEthCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthCalcCrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>stm32f4xxEthUpdateMacConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4xxEthUpdateMacConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>stm32f4xxEthWritePhyReg</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthWritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32f4xxEthWritePhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>strSafeCopy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, str.o(i.strSafeCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strSafeCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
</UL>

<P><STRONG><a name="[132]"></a>swapInt16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt16))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
</UL>

<P><STRONG><a name="[159]"></a>swapInt32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt32))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>

<P><STRONG><a name="[259]"></a>tcpAddOption</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpAddOption &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[25a]"></a>tcpChangeState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[25b]"></a>tcpCheckAck</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpCheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateAck
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[264]"></a>tcpCheckSequenceNumber</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpCheckSequenceNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpCheckSequenceNumber &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[265]"></a>tcpCheckSyn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpCheckSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcpCheckSyn &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[25f]"></a>tcpComputeRto</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpComputeRto))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tcpComputeRto &rArr; osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[266]"></a>tcpDeleteControlBlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpDeleteControlBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[26d]"></a>tcpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[262]"></a>tcpFastLossRecovery</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpFastLossRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcpFastLossRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[261]"></a>tcpFastRecovery</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tcpFastRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[263]"></a>tcpFastRetransmit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpFastRetransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcpFastRetransmit &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[267]"></a>tcpFlushRetransmitQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tcpFlushRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStop
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[268]"></a>tcpFlushSynQueue</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushSynQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tcpFlushSynQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[280]"></a>tcpGetOption</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[235]"></a>tcpInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcpInit))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[25d]"></a>tcpIsDuplicateAck</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpIsDuplicateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpIsDuplicateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[26b]"></a>tcpIsDuplicateSyn</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpIsDuplicateSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcpIsDuplicateSyn &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[26c]"></a>tcpNagleAlgo</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpNagleAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[1bf]"></a>tcpProcessSegment</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, tcp_fsm.o(i.tcpProcessSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[27a]"></a>tcpProcessSegmentData</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpProcessSegmentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[27d]"></a>tcpReadTxBuffer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpReadTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcpReadTxBuffer &rArr; netBufferConcat
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[269]"></a>tcpRetransmitSegment</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpRetransmitSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[26e]"></a>tcpSendResetSegment</STRONG> (Thumb, 304 bytes, Stack size 104 bytes, tcp_misc.o(i.tcpSendResetSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tcpSendResetSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
</UL>

<P><STRONG><a name="[25c]"></a>tcpSendSegment</STRONG> (Thumb, 534 bytes, Stack size 104 bytes, tcp_misc.o(i.tcpSendSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerRunning
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[274]"></a>tcpStateCloseWait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateCloseWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpStateCloseWait &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[26f]"></a>tcpStateClosed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp_fsm.o(i.tcpStateClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tcpStateClosed &rArr; tcpSendResetSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[278]"></a>tcpStateClosing</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateClosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpStateClosing &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[273]"></a>tcpStateEstablished</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[276]"></a>tcpStateFinWait1</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateFinWait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait1 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[277]"></a>tcpStateFinWait2</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateFinWait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait2 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[275]"></a>tcpStateLastAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateLastAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcpStateLastAck &rArr; tcpCheckSequenceNumber &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[270]"></a>tcpStateListen</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpStateListen &rArr; tcpSendResetSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[272]"></a>tcpStateSynReceived</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateSynReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[271]"></a>tcpStateSynSent</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateSynSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpStateSynSent &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[279]"></a>tcpStateTimeWait</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateTimeWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpStateTimeWait &rArr; tcpCheckSequenceNumber &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[245]"></a>tcpTick</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, tcp_timer.o(i.tcpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpTick &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerElapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[281]"></a>tcpTimerElapsed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpTimerElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tcpTimerElapsed &rArr; osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[27e]"></a>tcpTimerRunning</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_timer.o(i.tcpTimerRunning))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[27f]"></a>tcpTimerStart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tcpTimerStart &rArr; osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[26a]"></a>tcpTimerStop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_timer.o(i.tcpTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[239]"></a>tcpUpdateEvents</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcpUpdateEvents &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[260]"></a>tcpUpdateRetransmitQueue</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tcpUpdateRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[27c]"></a>tcpUpdateSackBlocks</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateSackBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSackBlocks &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[25e]"></a>tcpUpdateSendWindow</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateSendWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcpUpdateSendWindow &rArr; tcpTimerStart &rArr; osGetSystemTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[27b]"></a>tcpWriteRxBuffer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpWriteRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpWriteRxBuffer &rArr; netBufferCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[69]"></a>tcp_task</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, app_main.o(i.tcp_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcp_task &rArr; slaacStart &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGetDefaultSettings
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.create_app_task)
</UL>
<P><STRONG><a name="[68]"></a>uart_task</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, app_main.o(i.uart_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = uart_task &rArr; ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(i.create_app_task)
</UL>
<P><STRONG><a name="[108]"></a>ucos_kprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, os_debug.o(i.ucos_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_task
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInitFreq
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_show_version
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[143]"></a>ucos_show_version</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_main.o(i.ucos_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ucos_show_version &rArr; ucos_kprintf &rArr; rt_hw_console_output &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucos_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_task
</UL>

<P><STRONG><a name="[15e]"></a>udpAllocBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, udp.o(i.udpAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; osResumeAllTasks &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[155]"></a>udpAttachRxCallback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, udp.o(i.udpAttachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = udpAttachRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
</UL>

<P><STRONG><a name="[171]"></a>udpDetachRxCallback</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, udp.o(i.udpDetachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = udpDetachRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>

<P><STRONG><a name="[234]"></a>udpInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, udp.o(i.udpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = udpInit &rArr; osCreateMutex &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[286]"></a>udpInvokeRxCallback</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, udp.o(i.udpInvokeRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = udpInvokeRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[1c0]"></a>udpProcessDatagram</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, udp.o(i.udpProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = udpProcessDatagram &rArr; udpInvokeRxCallback &rArr; osAcquireMutex &rArr; osWaitForEvent &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[15f]"></a>udpSendDatagramEx</STRONG> (Thumb, 306 bytes, Stack size 104 bytes, udp.o(i.udpSendDatagramEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[23a]"></a>udpUpdateEvents</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, udp.o(i.udpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = udpUpdateEvents &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[233]"></a>webSocketInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, web_socket.o(i.webSocketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = webSocketInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[287]"></a>yarrowFastReseed</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, yarrow.o(i.yarrowFastReseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
</UL>

<P><STRONG><a name="[283]"></a>yarrowInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, yarrow.o(i.yarrowInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = yarrowInit &rArr; osCreateMutex &rArr; osSetEvent &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[284]"></a>yarrowSeed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, yarrow.o(i.yarrowSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yarrowSeed &rArr; yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[94]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[a4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[5f]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[af]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>UART_SetConfig</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b2]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>OS_InitEventList</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[cd]"></a>OS_InitMisc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ce]"></a>OS_InitTCBList</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d7]"></a>OS_SchedNew</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c8]"></a>OS_FlagBlock</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, os_flag.o(i.OS_FlagBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_FlagBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[c5]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_flag.o(i.OS_FlagTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[106]"></a>OSTmr_Link</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[63]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_Init)
</UL>
<P><STRONG><a name="[105]"></a>OSTmr_Unlink</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[10d]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[10f]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[111]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[110]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[11f]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[122]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[121]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[66]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[65]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
